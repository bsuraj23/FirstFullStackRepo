COmpitiors to google drive 

Dropbox
Microsoft OneDrive for Business
Dropbox Business
Box
Citrix ShareFile
Hightail
Egnyte
Apple iCloud
================================================================================================================
understand about oauth2 ?

OAuth is an Authorization Protocol that allows third party service to access secured resources, on behalf of resource owner.
It is designed to work with HTTP(Hyper Text Transfer Protocol) and it allows access tokens to be issued to the third party application by an authorization server with the approval from the owner.Authorization is process of verifying what they have access to. Therefore, OAuth is standard for allowing services trying to access each other on behalf of the user.


Example :Sign in through Google, Facebook, which uses OAuth to authorize the 3rd Party Service to access user data.

OAuth is thus an open standard for access delegation, which is commonly used as way for Internet users to grant websites or applications access to their information on other websites but without giving them the passwords.

Terminology used to describe participants/elements in an OAuth system are :
For example consider a photo printing website where customers of an online photo printing service require feature which allows printing service to directly fetch users photos from their Google Photos account. 

Resource –
It represents data which is to be accessed by 3rd Party service. In our example, Photos of user represent resource.
Resource Owner –
The resource owner is actual owner of resource. For our scenario, original owner of photos is resource owner.
Client –
The client represents 3rd Party service which requires access to the Resource on behalf of the Resource Owner. In our example, Photo Printing Service is the Client.
Resource Server –
It represents server on which Resource is securely stored. In our example, photos are hosted on Google Server, which acts as Resource Server.
Authorization Server (Auth Server) –
To implement OAuth protocol, an additional server has to be provided by entity which owns Resource Server, i.e., Google, since Google is hosting resource and has burden of security.

The OAuth process proceeds in the following manner (implicit flow):

Resource Owner requests service from Client, in our case, printing photos.
Client contacts AuthServer to request Resource, i.e., Photos on Google’s servers.Auth Server sends prompt to Resource Owner inquiring about request it received from Client in the form of login window from Google.
User confirms that services requested by Client and grants authorization to Auth Server on behalf of Client. This provides delegated access to Client.
Auth Server receives request for authorization from Resource Owner.
On authentication of and confirmation from Resource Owner, Auth Server sends Client an Access Token permitting it to access required resources hosted on Resource Server.
Client provides Access token to Resource Server.
On validation of the Access Token, resource is provided to Client.
Finally, user is able to access services of Client which can access secured resources on behalf of user.

 In some OAuth flows, instead of directly providing Client an Access Token,an intermediary Authorization Token may be provided by Auth Server to Client. To access resource, Client needs to first provide the Authorization Token to the Auth Server and make request for an access token. Such an OAuth flow is known as Authorization Code Flow. Such an OAuth flow is known as Authorization Code Flow.
=================================================================================================================================================================
S3 in AWS ?
S3 is one of the first services that has been produced by aws.
S3 stands for Simple Storage Service.
S3 is a safe place to store the files.
It is Object-based storage, i.e., you can store the images, word files, pdf files, etc.
The files which are stored in S3 can be from 0 Bytes to 5 TB.
It has unlimited storage means that you can store the data as much you want.
Files are stored in Bucket. A bucket is like a folder available in S3 that stores the files.
S3 is a universal namespace, i.e., the names must be unique globally. Bucket contains a DNS address. Therefore, the bucket must contain a unique name to generate a unique DNS address.

S3 is object-based. Objects consist of the following:

Key: It is simply the name of the object. For example, hello.txt, spreadsheet.xlsx, etc. You can use the key to retrieve the object.
Value: It is simply the data which is made up of a sequence of bytes. It is actually a data inside the file.
Version ID: Version ID uniquely identifies the object. It is a string generated by S3 when you add an object to the S3 bucket.
Metadata: It is the data about data that you are storing. A set of a name-value pair with which you can store the information regarding an object. Metadata can be assigned to the objects in Amazon S3 bucket.
Subresources: Subresource mechanism is used to store object-specific information.
Access control information: You can put the permissions individually on your files.
===============================================================================================================================================================

why we get access denied when we try to open the object uploaded into the s3 bucket ?

By default buckets are private and all the objects stored in a bucket are also private.To overcome this problem select the object and modify the public access setting permissions. select all the permissions for public access and save your changes after that click on Actions dropdown and select "Make public" option.
Now open the file and the file will be opened .
===================================================================================================================================================================
like Ec2 in GCP or oracle

GCP offers compute engine
oracle offers Oracle Cloud Infrastructure Compute 
=================================================================================================================================================================
public and private keys
The KeyPairs used with EC2 instances are an example of asymmetric encryption keys. 
Asymmetric encryption uses key pairs, a private and a public key. Whatever is encrypted by one key in the pair may only be decrypted by the other key in the pair. Private keys are intended to be held securely by only those intended to have them, and the public key can be given out to anyone.
A key pair, consisting of a private key and a public key, is a set of security credentials that you use to prove your identity when connecting to an instance. Amazon EC2 stores the public key, and you store the private key. You use the private key, instead of a password, to securely access your instances. Anyone who possesses your private keys can connect to your instances, so it's important that you store your private keys in a secure place.
If the public key on the instance and the private key used by the client are from the same KeyPair, then the data returned to the instance will be an exact match for the unencrypted copy of the challenge data. The only way that is possible is if the keys are from the same key pair. As the private key is assumed to only be accessible by authorized users, the only users who can successfully complete this SSH challenge should also be authorized to access the OS of that EC2 instance.

Think of the public key as the lock on your door. Many people will pass your door and see the lock, but will not be able to open the lock, because they do not have your key(private key) to open the lock(public key)

When the key(private key) matches the lock(public key) you can then open the door.

You use the private key to create a digital signature, and then AWS uses the corresponding public key to validate the signature.